---
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { ViewTransitions } from 'astro:transitions';
import SVGFilters from "@/components/SVGFilters.astro";

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <ViewTransitions />
    <script>
      // Initial theme setup - runs once on page load
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      
      // Apply theme to html element
      document.documentElement.setAttribute('data-theme', theme || 'light');
      document.documentElement.style.colorScheme = theme as 'light' | 'dark';
      
      // Also add/remove the dark class for backward compatibility
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body>
    <!-- Theme state that persists across page transitions -->
    <div id="theme-controller" transition:persist="theme-controller"></div>
    
    <!-- Video background is placed here once and persists across page transitions -->
    <div id="video-background" class="fixed-video-background" transition:persist="video-background">
      <div class="video-overlay"></div>
      <div class="white-overlay dark:invert"></div>
      <video
        class="video-bg dark:invert"
        playsinline
        autoplay
        muted
        loop
        preload="metadata"
        id="bgvid"
        poster="/video-poster.jpg"
      >
        <source src="/sky.mp4" type="video/mp4" />
      </video>
    </div>
    
    <!-- SVG Filters that persist across page transitions -->
    <div transition:persist="svg-filters">
      <SVGFilters />
    </div>
    
    <Header />
    <main class="container mx-auto md:px-8">
      <slot />
    </main>
    <Footer />
    
    <script>
      // Video background loading handler
      document.addEventListener('DOMContentLoaded', () => {
        document.body.classList.add('has-video-bg');
        
        // Lazy load the video for better performance
        const video = document.getElementById('bgvid') as HTMLVideoElement;
        if (video) {
          // Only start loading the video after the page has loaded
          setTimeout(() => {
            video.load();
          }, 100);
        }
        
        // Setup image preloading on hover
        setupImagePreloading();
      });
      
      // Function to handle preloading images on hover
      function setupImagePreloading() {
        // Get all elements with preload-trigger class
        const triggers = document.querySelectorAll('.preload-trigger');
        
        triggers.forEach(trigger => {
          // Find all preload images within this trigger
          const preloadImages = trigger.querySelectorAll('[data-preload-src]');
          
          if (preloadImages.length === 0) return;
          
          // Add hover event listener
          trigger.addEventListener('mouseenter', () => {
            preloadImages.forEach(img => {
              const imgElement = img as HTMLImageElement;
              const src = imgElement.getAttribute('data-preload-src');
              
              if (src && !imgElement.src) {
                // Create a new image to preload
                const preloader = new Image();
                preloader.src = src;
                
                // Once loaded, set the src on the original element
                preloader.onload = () => {
                  imgElement.src = src;
                };
              }
            });
          });
        });
      }

      // Handle theme persistence across page transitions
      const handleThemePersistence = () => {
        const theme = localStorage.getItem('theme') || 
          (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        
        // Set data-theme attribute
        document.documentElement.setAttribute('data-theme', theme);
        document.documentElement.style.colorScheme = theme as 'light' | 'dark';
        
        // Also add/remove the dark class for backward compatibility
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
          document.body.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
          document.body.classList.remove('dark');
        }
      };

      // Run on every Astro page transition
      document.addEventListener('astro:page-load', () => {
        // Make sure the video is playing after page transitions
        const video = document.getElementById('bgvid') as HTMLVideoElement;
        if (video && video.paused) {
          video.play();
        }
        
        // Apply theme from localStorage on every page transition
        handleThemePersistence();
        
        // Setup image preloading after page transitions
        setupImagePreloading();
      });

      // Handle view transitions before they start
      document.addEventListener('astro:before-swap', () => {
        // Store the current video time to resume from the same point
        const video = document.getElementById('bgvid') as HTMLVideoElement;
        if (video) {
          sessionStorage.setItem('videoTime', video.currentTime.toString());
        }
      });

      // After the page swap, restore the video state
      document.addEventListener('astro:after-swap', () => {
        const video = document.getElementById('bgvid') as HTMLVideoElement;
        if (video) {
          const storedTime = sessionStorage.getItem('videoTime');
          if (storedTime) {
            video.currentTime = parseFloat(storedTime);
          }
          video.play();
        }
        
        // Ensure theme is applied after swap
        handleThemePersistence();
      });
    </script> 
  </body>
</html>

<style is:global>
  /* Theme variables using light-dark() function */
  :root {
    color-scheme: light dark;
    --text-color: light-dark(#000000, #ffffff);
    --bg-color: light-dark(#ffffff, #121212);
    --overlay-bg: light-dark(rgba(255, 255, 255, 0.25), rgba(0, 0, 0, 0.15));
    --overlay-gradient: light-dark(
      linear-gradient(to bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.1)),
      linear-gradient(to bottom, rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.4))
    );
  }
  
  /* Apply theme based on data-theme attribute */
  html[data-theme="light"] {
    color-scheme: light;
  }
  
  html[data-theme="dark"] {
    color-scheme: dark;
  }
  
  /* Add a class to the body for when video is active */
  body.has-video-bg {
    background: transparent;
  }
  
  /* Fixed video background */
  .fixed-video-background {
    position: fixed;
    top: -5vh;
    left: -5vw;
    width: 110vw;
    height: 110vh;
    z-index: -1;
    overflow: hidden;
  }
  
  /* Video overlay */
  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--overlay-gradient);
    z-index: 1;
  }
  
  /* White overlay for brightness */
  .white-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--overlay-bg);
    z-index: 1;
  }
  
  /* Base video styles */
  .video-bg {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
  }
  
  /* Dark mode inversion */
  html[data-theme="dark"] .video-bg,
  html.dark .video-bg {
    filter: invert(1) hue-rotate(180deg);
  }
</style> 