---
import type { CollectionEntry } from "astro:content";
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";
import VideoBackground from "@/components/VideoBackground.astro";
import SVGFilters from "@/components/SVGFilters.astro";


type Props = CollectionEntry<"blog">["data"];

const {
  title = "",
  description,
  pubDate,
  updatedDate,
  heroImage = "/fran.jpg",
  icon,
  tags,
} = Astro.props;
import { getCollection } from "astro:content";
const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const bgClasses = [
  "bg-ppink",
  "bg-pgreen",
  "bg-pblue",
  "bg-pyellow",
];

import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
if (heroImage.startsWith("/src/assets/") && !images[heroImage]) throw new Error(`"${heroImage}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);

const getRandomClass = () => {
  return bgClasses[Math.floor(Math.random() * bgClasses.length)];
};
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body>
    <VideoBackground />
    <SVGFilters />
    <Header />
    <main class="container mx-auto md:px-10 pt-16">
      <article>
        <div class="relative mb-20 backdrop-blur-md" transition:animate="fade">
          <!-- Simple black/white hero section instead of image -->
          <div class=" dark:bg-black/30 bg-white/30 h-96 w-full flex items-center justify-center">
            <div class="text-center px-6">
              <h1 class="text-4xl md:text-9xl font-semibold text-white dark:text-black mb-4">
                {title}
              </h1>
              <p class="text-white dark:text-black text-xl md:text-2xl" set:html={description} />
            </div>
          </div>
        </div>
        <div class="px-6 md:px-0">
          <div class="">
            <div class="text-sm flex items-center justify-between">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
              <span class="text-5xl" transition:animate="fade">
                {icon}
              </span>
            </div>

            <hr />
          </div>
          <div class="flex justify-between py-10 md:flex-row flex-col">
            <div class="prose md:w-1/2 flex flex-col gap-6 dark:prose-invert">
              <slot />
            </div>
            <div class="flex flex-col gap-6" transition:animate="slide">
              <ul class="flex flex-col gap-2 pt-10 md:pt-0 items-start md:items-end">
                <p class="md:hidden font-semibold">Related:</p>
                {
                  posts.map((post) => {
                    const randomClass = getRandomClass();
                    return (
                      <li class={`text-left rounded-lg border-1 border-black backdrop-blur-md bg-white/30 dark:bg-black/30 group transition px-2 py-2 ${randomClass}`}>
                        <a
                          href={`/blog/${post.id}/`}
                        >
                          <h4 class="dark:text-white">{post.data.title}</h4>
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            </div>
          </div>
        </div>
      </article>
    </main>
    <Footer />
    
  </body>
</html>

<style>
  /* Add styles for better dark mode text contrast */
  :global(.dark) .prose {
    color: #f2f2f2;
  }
  
  :global(.dark) h1, :global(.dark) h2, :global(.dark) h3, :global(.dark) h4 {
    color: #ffffff;
  }
  
  :global(.dark) p {
    color: #e0e0e0;
  }
</style>