---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";

type Props = Omit<CollectionEntry<"blog">["data"], "icon">;

const {
  title = "",
  description,
  pubDate,
  updatedDate,
  heroImage = "/fran.jpg",
  tags,
} = Astro.props as {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  heroImage?: string;
  tags?: string[];
};
import { getCollection } from "astro:content";
const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const bgClasses = [
  "bg-white/10 dark:bg-black/10 rounded-xl",
  "bg-white/10 dark:bg-black/10 rounded-xl",
  "bg-white/10 dark:bg-black/10 rounded-xl",
  "bg-white/10 dark:bg-black/10 rounded-xl",
];

import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
if (heroImage.startsWith("/src/assets/") && !images[heroImage]) throw new Error(`"${heroImage}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);

const getRandomClass = () => {
  return bgClasses[Math.floor(Math.random() * bgClasses.length)];
};
---

<BaseLayout title={title} description={description}>
  <article>
    <div class="relative mb-20 backdrop-blur-md " transition:animate="fade">
      <!-- Hero section with image and title -->
      <div class="dark:bg-black/30 bg-white/30 h-96 w-full flex items-center justify-center rounded-xl overflow-hidden relative">
        <!-- Hero image as background -->
        {heroImage && (
          <div class="absolute inset-0 z-0 opacity-30 blog-hero-image-container">
            {heroImage.startsWith('/src/assets/') ? (
              <Image
                src={images[heroImage]()}
                alt={`Hero image for ${title}`}
                class="w-full h-full object-cover"
                loading="eager"
              />
            ) : (
              <img
                src={heroImage}
                alt={`Hero image for ${title}`}
                class="w-full h-full object-cover"
                loading="eager"
                fetchpriority="high"
              />
            )}
          </div>
        )}
        
        <!-- Title and description overlay -->
        <div class="text-center px-6 z-10 relative">
          <h1 class="text-4xl md:text-9xl font-semibold dark:text-white text-black mb-4">
            {title}
          </h1>
          <p class="text-black dark:text-white text-xl md:text-2xl" set:html={description} />
        </div>
      </div>
    </div>
    <div class="px-6 md:px-0">
      <div class="">
        <div class="text-sm flex items-center justify-between">
          <FormattedDate date={pubDate} />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>

        <hr />
      </div>
      <div class="flex justify-center py-5 md:flex-row flex-col w-full">
        <div class="prose flex flex-col gap-6 dark:prose-invert  w-full">
          <slot />
        </div>
        
      </div>
    </div>
  </article>
</BaseLayout>

<script>
  // Ensure blog hero images are properly loaded
  document.addEventListener('DOMContentLoaded', setupBlogHeroImages);
  document.addEventListener('astro:page-load', setupBlogHeroImages);
  
  function setupBlogHeroImages() {
    const heroImageContainers = document.querySelectorAll('.blog-hero-image-container');
    
    heroImageContainers.forEach(container => {
      const img = container.querySelector('img');
      if (!img) return;
      
      // Initially set opacity to 0
      img.style.opacity = '0';
      
      // When image is loaded, fade it in
      if (img.complete) {
        // Image is already loaded
        setTimeout(() => {
          img.style.opacity = '1';
        }, 100);
      } else {
        // Wait for image to load
        img.onload = () => {
          img.style.opacity = '1';
        };
      }
    });
  }
</script>

<style>
  /* Add styles for better dark mode text contrast */
  :global(.dark) .prose {
    color: #f2f2f2;
  }
  
  :global(.dark) h1, :global(.dark) h2, :global(.dark) h3, :global(.dark) h4 {
    color: #ffffff;
  }
  
  :global(.dark) p {
    color: #e0e0e0;
  }

  .icon-container {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
</style>
