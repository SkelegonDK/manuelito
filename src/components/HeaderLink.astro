---
import type { HTMLAttributes } from 'astro/types';

type Type = "primary" | "secondary" | "tertiary";
const { href = "", text = "", style = "primary", class: className, ...props } = Astro.props;

interface Props extends HTMLAttributes<'a'> {
  text: string;
  href: string;
  style: Type;
}

const types: Record<Type, string> = {
  primary: "text-pblue dark:text-pblue",
  secondary: "text-pgreen dark:text-pgreen",
  tertiary: "text-ppink dark:text-ppink",
};

const getType = (style: Type) => {
  return types[style] || "";
};

const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
---

<a
  href={href}
  class:list={[
    className, 
    `frick rounded-md inline-block px-4 py-1 transition ease-in-out ${getType(style)}`,
    { active: isActive }
  ]}
  {...props}
>
  {text}
</a>

<style>
  a {
    display: inline-block;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  a.active {
    font-weight: bolder;
    text-decoration: underline;
  }
  
  :global(.dark) a {
    color: white;
  }
  
  :global(.dark) a.active {
    color: white;
  }
</style>