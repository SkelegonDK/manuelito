---
// Picture.astro - A component that uses the <picture> element for responsive images
// This component uses the optimized images generated by the optimize-images.js script

import fs from 'node:fs';
import path from 'node:path';

interface Props {
  src: string; // Original image path (e.g., "/src/assets/image.jpg")
  alt: string;
  class?: string;
  sizes?: string;
  widths?: number[];
  loading?: 'eager' | 'lazy';
}

const { 
  src, 
  alt, 
  class: className = '',
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
  widths = [320, 640, 1024, 1280],
  loading = 'lazy'
} = Astro.props;

// Extract the base name without extension
const baseName = src.split('/').pop()?.split('.')[0];

// Function to get the public path for optimized images
function getOptimizedPath(width?: number, format = 'webp') {
  if (width) {
    return `/optimized/${baseName}-${width}.${format}`;
  }
  return `/optimized/${baseName}.${format}`;
}

// Check if optimized images exist
const publicDir = path.join(process.cwd(), 'public');
const avifExists = fs.existsSync(path.join(publicDir, getOptimizedPath(undefined, 'avif').substring(1)));
const webpExists = fs.existsSync(path.join(publicDir, getOptimizedPath(undefined, 'webp').substring(1)));

// Only include widths that have corresponding files
const availableWidths = widths.filter(w => {
  const webpPath = path.join(publicDir, getOptimizedPath(w).substring(1));
  return fs.existsSync(webpPath);
});
---

<picture>
  {avifExists && (
    <source 
      srcset={getOptimizedPath(undefined, 'avif')}
      type="image/avif"
    />
  )}
  
  {webpExists && availableWidths.length > 0 && (
    <source 
      srcset={availableWidths.map(w => `${getOptimizedPath(w)} ${w}w`).join(', ')}
      sizes={sizes}
      type="image/webp"
    />
  )}
  
  <!-- Fallback image (original) -->
  <img 
    src={src} 
    alt={alt}
    loading={loading}
    class={className}
  />
</picture>

<style>
  picture {
    display: block;
    width: 100%;
  }
  
  img {
    display: block;
    max-width: 100%;
    height: auto;
  }
</style> 