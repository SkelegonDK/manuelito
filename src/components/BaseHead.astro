---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
}

import { ClientRouter } from "astro:transitions";
const { title, description, image = "/screenshot.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/Alexandria-Bold.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/Alexandria-Light.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/Alexandria-Regular.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/Frick0.3-Regular.woff2" as="font" type="font/woff2" crossorigin />

<!-- Primary Meta Tags -->
<title>{title}</title>
<ClientRouter />
<meta name="title" content={title} />
<meta name="description" content={description} />
<link rel="icon" href="/new-favicon/favicon.svg?v=1" type="image/svg+xml">
<link rel="apple-touch-icon" sizes="180x180" href="/new-favicon/apple-touch-icon.png?v=1">
<link rel="icon" type="image/png" sizes="32x32" href="/new-favicon/favicon-32x32.png?v=1">
<link rel="icon" type="image/png" sizes="16x16" href="/new-favicon/favicon-16x16.png?v=1">
<link rel="manifest" href="/new-favicon/site.webmanifest?v=1">
<link rel="shortcut icon" href="/favicon.ico?v=1">
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />
